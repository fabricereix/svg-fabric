# Build starts faster without `sudo`
sudo: false

language: c
compiler: gcc

cache:
  directories:
  - $HOME/.stack
  timeout: 300

git:
  depth: 100

matrix:
  include:
    - env: &lts-fixed ARGS="--resolver lts-12.18"
      dist: xenial
      addons:
        artifacts: {paths: [./releases]}
      before_deploy:
        - curl -sSL https://github.com/upx/upx/releases/download/v3.94/upx-3.94-amd64_linux.tar.xz
          | tar -x --xz --strip-components=1 -C ~/.local/bin upx-3.94-amd64_linux/upx
        - upx -q --best --ultra-brute "./releases/${BINARY_NAME}"
        - upx -q --best --ultra-brute "./releases/${BINARY_PARSER_NAME}"


    # Build on OS X in addition to Linux
    - env: *lts-fixed
      addons:
        artifacts: {paths: [./releases]}
      before_deploy:
        # Show dynamic libraries `hadolint` depends on
        - otool -L $(which hadolint) || true
        - brew update > /dev/null
        - brew install upx
        - brew install jq
        # Compress binary
        - upx -q --best --ultra-brute "./releases/${BINARY_NAME}"
        - upx -q --best --ultra-brute "./releases/${BINARY_PARSER_NAME}"
      os: osx

    - env: Quality
      script:
         - curl -sL https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh | sh -s .


before_install:
  - export BINARY_QUERY_NAME="hurl-query-$(uname -s)-$(uname -m)"
  - export BINARY_PARSER_NAME="hurl-parser-$(uname -s)-$(uname -m)"
  - export BINARY_REPORT_NAME="hurl-report-$(uname -s)-$(uname -m)"
  # Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - |
    if [[ "${TRAVIS_OS_NAME}" = "osx" ]]
    then
      brew install jq 
      travis_retry curl -sSL https://www.stackage.org/stack/${TRAVIS_OS_NAME}-x86_64 \
        | tar xz --strip-components=1 -C ~/.local/bin --include   '*/stack'
    else
      travis_retry curl -sSL https://www.stackage.org/stack/${TRAVIS_OS_NAME}-x86_64 \
        | tar xz --strip-components=1 -C ~/.local/bin --wildcards '*/stack'
    fi

install:
  - travis_retry stack --no-terminal --install-ghc $ARGS test --only-dependencies
  - stack --no-terminal $ARGS install --ghc-options='-fPIC'

script:
  - stack --no-terminal $ARGS test
  - stack install
  
after_success:
  - cd ..
  - mkdir -p ./releases/
  - echo "Upload Release"
